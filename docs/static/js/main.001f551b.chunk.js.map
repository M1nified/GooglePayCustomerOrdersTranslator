{"version":3,"sources":["logo.svg","apiKey/apiKeyComponent.tsx","filesTable/conversions.ts","filesTable/filesTableComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApiKey","apiKey","onSetApiKey","useState","formApiKey","setFormApiKey","onSubmit","event","preventDefault","type","placeholder","name","value","onChange","target","defaultProps","defaultRowFilter","withHeader","colMap","row","rowNumber","idx","defaultRowConversion","a","isHeader","merchantCurrency","stringNumberRegexp","indexesToKeep","map","title","newRow","filter","_val","includes","push","orderCreationDate","parseGoogleDateTime","toISOString","transactionCurrency","transactionValue","Number","parseFloat","match","pop","getConversionRate","currencyConversion","merchantCurrencyAmount","ColMap","header","columnName","this","indexOf","googleDateTime","dateTime","Date","parse","base","date","url","slice","window","localStorage","getItem","console","log","fetch","json","response","rates","FileTable","files","setFiles","onDrop","stopPropagation","dataTransfer","length","error","items","arr","i","getAsFile","Promise","all","item","text","resolve","reject","err","output","parsed","id","Math","random","toString","size","lastModified","readyFiles","eventPrevent","number","handleConvertClick","file","mapColumns","filteredRows","converdedRows","converted","newFiles","oldFile","handleDownloadClick","csvStringify","csv","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","onDropCapture","onDragEnter","onDragOver","key","onClick","App","LS_API_KEY","setApiKey","className","setItem","removeItem","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.001f551b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useState } from 'react';\n\ntype ApiKeyProps = {\n  apiKey: string | null,\n  onSetApiKey: (apiKey: string | null) => any,\n}\n\nexport const ApiKey = ({ apiKey, onSetApiKey, }: ApiKeyProps) => {\n\n  const [formApiKey, setFormApiKey] = useState(apiKey);\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onSetApiKey(formApiKey);\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"API KEY\"\n        name=\"apiKey\"\n        value={formApiKey || ''}\n        onChange={event => setFormApiKey(event.target.value)}\n      />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n\nApiKey.defaultProps = {\n  apiKey: null,\n  onSetApiKey: () => { },\n}","export type RowConversionRuleOptions = {\n  isHeader: boolean | undefined;\n  colMap: ColMap;\n}\nexport type RowConversionRule = (row: any[], options: RowConversionRuleOptions) => Promise<any[]>;\n\nexport type RowFilterRuleOptions = {\n  withHeader: boolean | undefined;\n  colMap: ColMap;\n}\nexport type RowFilterRule = (options: RowFilterRuleOptions) => (row: any[], rowNumber?: number) => boolean;\n\nexport const defaultRowFilter: RowFilterRule = ({\n  withHeader,\n  colMap,\n}) => (row, rowNumber) => {\n  if (withHeader && rowNumber === 0) {\n    return true;\n  }\n  const financialStatusColId = colMap.idx('Financial Status');\n  if (row[financialStatusColId] !== 'Charged') {\n    return false;\n  }\n  return true;\n}\n\nexport const defaultRowConversion: RowConversionRule = async (row,\n  {\n    isHeader,\n    colMap,\n  }\n) => {\n  const merchantCurrency = 'PLN';\n  const outputDateTimeFormat = 'yyyy-MM-dd HH:mm';\n  const stringNumberRegexp = /([\\d,.]+)/;\n  const colsToKeep = [\n    'Order Creation Date',\n    'Currency of Transaction\t',\n    'Order Amount',\n    'Amount Charged',\n    'Financial Status',\n    'Total Tax',\n    'Buyer State',\n    'Buyer Postal Code',\n    'Buyer Country',\n    'Item 1 Name',\n    'Item 1 Price',\n    'Item 1 Quantity',\n  ];\n  const indexesToKeep = colsToKeep.map(title => colMap.idx(title));\n  const newRow = row.filter((_val, idx) => indexesToKeep.includes(idx));\n  if (isHeader) {\n    newRow.push('Merchant Currency');\n    newRow.push('Currency Conversion');\n    newRow.push('Amount (Merchant Currency)');\n  } else {\n    const orderCreationDate = parseGoogleDateTime(row[colMap.idx('Order Creation Date')]);\n    newRow[0] = orderCreationDate.toISOString();\n\n    const transactionCurrency = row[colMap.idx('Currency of Transaction')];\n    const transactionValue = Number.parseFloat(row[colMap.idx('Amount Charged')].match(stringNumberRegexp).pop());\n\n    newRow.push(merchantCurrency);\n\n    const currencyConversion = await getConversionRate(transactionCurrency, merchantCurrency, orderCreationDate);\n    const merchantCurrencyAmount = currencyConversion * transactionValue;\n\n    newRow.push(currencyConversion);\n    newRow.push(merchantCurrencyAmount);\n\n  }\n  return newRow;\n}\n\nexport const mapColumns = (header: string[]) => {\n  return [...header.values()].map;\n}\n\nexport class ColMap {\n  private header: string[] = [];\n\n  idx(columnName: string) {\n    return this.header.indexOf(columnName);\n  }\n\n  static mapColumns(header: string[]) {\n    const colMap = new ColMap();\n    colMap.header = header;\n    return colMap;\n  }\n}\n\nconst parseGoogleDateTime = (googleDateTime: string) => {\n  const dateTime = Date.parse(googleDateTime);\n  const date = new Date(dateTime);\n  return date;\n}\n\nconst getConversionRate = async (base: string, target: string, date: Date) => {\n  const url = `https://data.fixer.io/api/${date.toISOString().slice(0, 10)}?access_key=${window.localStorage.getItem('API_KEY')}&symbols=${base},${target}`;\n  console.log(url);\n  const response = await (await fetch(url)).json();\n  return response.rates[target] / response.rates[base];\n}","import React, { useState } from 'react';\nimport parse from \"csv-parse\";\nimport csvStringify from 'csv-stringify';\nimport { defaultRowFilter, ColMap, defaultRowConversion } from './conversions';\nimport { rejects } from 'assert';\n\ntype ReadyFile = {\n  id: string,\n  name: string | undefined;\n  size: number | undefined;\n  type: string | undefined;\n  lastModified: number | undefined;\n  text: string | undefined;\n  parsed: any[] | undefined;\n  converted: any[] | undefined;\n}\n\nexport const FileTable = () => {\n  const [files, setFiles] = useState([] as ReadyFile[]);\n\n  const onDrop = async (event: React.DragEvent) => {\n    console.log(event)\n    event.preventDefault();\n    event.stopPropagation();\n    console.log(event.dataTransfer.files)\n    if (!event.dataTransfer.files.length) {\n      console.error('NO FILES DROPPED')\n      return;\n    }\n    const items = ((items: DataTransferItemList) => {\n      const arr = [];\n      for (let i = 0; i < items.length; i++) {\n        arr.push(items[i].getAsFile());\n      }\n      return arr;\n    })(event.dataTransfer.items);\n    console.log(items)\n\n    const readyFiles = await Promise.all(items.map(async item => {\n      const text = await item?.text();\n      console.log(typeof parse)\n      const parsed = await new Promise((resolve, reject) => {\n        if (typeof text !== 'string') {\n          reject();\n          return;\n        }\n        parse(text, {\n        }, (err, output) => {\n          if (err) {\n            console.error(err);\n            reject();\n            return;\n          }\n          resolve(output);\n        });\n      })\n      const id = Math.random().toString();\n      return {\n        id,\n        name: item?.name,\n        size: item?.size,\n        type: item?.type,\n        lastModified: item?.lastModified,\n        text,\n        parsed,\n      } as ReadyFile;\n    }));\n    console.log('READY FILES', readyFiles)\n\n    setFiles(readyFiles);\n  }\n\n  const onDragEnter = (event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    console.log('ENTER', event)\n\n  }\n\n  const eventPrevent = (number = 0) => (event: React.DragEvent) => {\n    event.preventDefault();\n    // event.stopPropagation();\n    console.log('PREVENT', number, event)\n  }\n\n  const handleConvertClick = (file: ReadyFile) => async (event: React.MouseEvent) => {\n    event.preventDefault();\n    console.log('CONVERT', file)\n    if (!file.parsed || file.parsed.length === 0) return;\n    const colMap = ColMap.mapColumns(file.parsed[0]);\n    const filteredRows = file.parsed.filter(defaultRowFilter({ withHeader: true, colMap, }));\n    console.log(filteredRows);\n    const converdedRows = await Promise.all(filteredRows.map((row, idx) => defaultRowConversion(row, {\n      isHeader: idx === 0,\n      colMap,\n    })));\n    console.log(converdedRows);\n    file.converted = converdedRows;\n    const newFiles = files.map(oldFile => oldFile.id === file.id ? file : oldFile);\n    setFiles(newFiles);\n  }\n\n  const handleDownloadClick = (file: ReadyFile) => async (event: React.MouseEvent) => {\n    event.preventDefault();\n    if (!file.converted) {\n      console.error('File needs to be converted first');\n      return;\n    }\n    const csv = await new Promise<string>((resolve, reject) => {\n      if (!file.converted) {\n        reject();\n        return;\n      }\n      csvStringify(file.converted, (err, output) => {\n        if (err) {\n          console.error(err);\n          reject();\n          return;\n        }\n        resolve(output);\n      })\n    });\n    console.log(csv);\n    download(file.name || 'converted.csv', csv);\n  }\n\n  const download = (filename: string, text: string) => {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  return (\n    <div\n      onDrop={onDrop}\n      onDropCapture={eventPrevent(1)}\n      onDragEnter={onDragEnter}\n      onDragOver={eventPrevent(2)}\n    >\n      <table>\n        <tbody>\n          {\n            files.map((file, key) => (\n              <tr key={key}>\n                <td>{file.name}</td>\n                <td onClick={handleConvertClick(file)}>Convert</td>\n                <td onClick={handleDownloadClick(file)}>Save</td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n      <p>\n        Drop files to convert.\n      </p>\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ApiKey } from './apiKey/apiKeyComponent';\nimport { FileTable } from './filesTable/filesTableComponent';\n\nfunction App() {\n  const LS_API_KEY = 'API_KEY';\n  const [apiKey, setApiKey] = useState(window.localStorage.getItem(LS_API_KEY));\n\n  const onSetApiKey = (apiKey: string | null) => {\n    if (apiKey) {\n      window.localStorage.setItem(LS_API_KEY, apiKey);\n    } else {\n      window.localStorage.removeItem(LS_API_KEY);\n    }\n    setApiKey(apiKey);\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        apiKey ? '' : <ApiKey apiKey={apiKey} onSetApiKey={onSetApiKey} />\n      }\n      <FileTable />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}